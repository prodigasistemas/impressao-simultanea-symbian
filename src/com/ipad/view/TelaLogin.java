/* * Copyright (C) 2007-2009 the GSAN - Sistema Integrado de Gestão de Serviços de Saneamento * * This file is part of GSAN, an integrated service management system for Sanitation * * GSAN is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License. * * GSAN is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA *//* * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento * Copyright (C) <2007>  * Adriano Britto Siqueira * Alexandre Santos Cabral * Ana Carolina Alves Breda * Ana Maria Andrade Cavalcante * Aryed Lins de Araújo * Bruno Leonardo Rodrigues Barros * Carlos Elmano Rodrigues Ferreira * Clêudio de Andrade Lira * Denys Guimarães Guenes Tavares * Eduardo Breckenfeld da Rosa Borges * Fabíola Gomes de Araújo * Flêvio Leonardo Cavalcanti Cordeiro * Francisco do Nascimento Júnior * Homero Sampaio Cavalcanti * Ivan Sérgio da Silva Júnior * José Edmar de Siqueira * José Thiago Tenório Lopes * Kássia Regina Silvestre de Albuquerque * Leonardo Luiz Vieira da Silva * Márcio Roberto Batista da Silva * Maria de Fátima Sampaio Leite * Micaela Maria Coelho de Araújo * Nelson Mendonça de Carvalho * Newton Morais e Silva * Pedro Alexandre Santos da Silva Filho * Rafael Corrêa Lima e Silva * Rafael Francisco Pinto * Rafael Koury Monteiro * Rafael Palermo de Araújo * Raphael Veras Rossiter * Roberto Sobreira Barbalho * Roberto Souza * Rodrigo Avellar Silveira * Rosana Carvalho Barbosa * Sávio Luiz de Andrade Cavalcante * Tai Mu Shih * Thiago Augusto Souza do Nascimento * Tiago Moreno Rodrigues * Vivianne Barbosa Sousa * * Este programa é software livre; você pode redistribuí-lo e/ou * modificá-lo sob os termos de Licença Pública Geral GNU, conforme * publicada pela Free Software Foundation; versão 2 da * Licença. * Este programa é distribuído na expectativa de ser útil, mas SEM * QUALQUER GARANTIA; sem mesmo a garantia implêcita de * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais * detalhes. * Você deve ter recebido uma cópia da Licença Pública Geral GNU * junto com este programa; se não, escreva para Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA * 02111-1307, USA. */package com.ipad.view;import com.ipad.basic.ImovelReg11;import com.ipad.facade.Fachada;import com.ipad.util.Criptografia;import com.ipad.util.Util;import com.sun.lwuit.Command;import com.sun.lwuit.Container;import com.sun.lwuit.Font;import com.sun.lwuit.Form;import com.sun.lwuit.Label;import com.sun.lwuit.TextArea;import com.sun.lwuit.TextField;import com.sun.lwuit.animations.CommonTransitions;import com.sun.lwuit.events.ActionEvent;import com.sun.lwuit.events.ActionListener;import com.sun.lwuit.layouts.BorderLayout;import com.sun.lwuit.layouts.BoxLayout;public class TelaLogin implements ActionListener {    private Form fmLogin;    private Label login;    private Label senha;    private TextField txLogin;    private Command ok;    private Command sair;    private Container loginContainer;    private Font font;    /*     * private Label proxy; private TextField txProxy;     */    private TextField txSenha;    private static TelaLogin instancia = null;    public TelaLogin() {    }    public void criarTelaLogin() {	fmLogin = new Form("PRODUÇÃO - " + Fachada.versao);	font = Font.createSystemFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_LARGE);	try {	    loginContainer = new Container(new BoxLayout(BoxLayout.Y_AXIS));	    this.login = new Label("Login");	    this.login.getStyle().setFont(font);	    this.senha = new Label("Senha");	    this.senha.getStyle().setFont(font);	    this.setTxLogin(new TextField(10));	    this.setTxSenha(new TextField());	    this.txSenha.setConstraint(TextArea.PASSWORD);	    this.txSenha.setInputMode("abc");	    loginContainer.addComponent(this.login);	    loginContainer.addComponent(this.getTxLogin());	    loginContainer.addComponent(this.senha);	    loginContainer.addComponent(this.getTxSenha());	    sair = new Command("Sair");	    fmLogin.addCommand(sair);	    ok = new Command("Ok");	    fmLogin.addCommand(ok);	    fmLogin.setCommandListener(this);	} catch (Exception e) {	    e.printStackTrace();	}		fmLogin.setTransitionOutAnimator(CommonTransitions.createSlide(CommonTransitions.SLIDE_HORIZONTAL, false, 1500));	fmLogin.setLayout(new BorderLayout());	fmLogin.addComponent(BorderLayout.CENTER, this.loginContainer);	fmLogin.show();    }    public TextField getTxLogin() {	return txLogin;    }    public void setTxLogin(TextField txLogin) {	this.txLogin = txLogin;    }    public TextArea getTxSenha() {	return txSenha;    }    public void setTxSenha(TextField txSenha) {	this.txSenha = txSenha;    }    public void actionPerformed(ActionEvent evt) {			if (evt.getCommand() == ok) {		    		    ImovelReg11 reg11 = ImovelReg11.getInstancia();		    if (txLogin.getText().equals(reg11.getLogin()) && reg11.getSenha().equals(Criptografia.encode(txSenha.getText()))) {					    					String versaoArquivo = Util.retirarCaracteresString(reg11.getVersaoCelular().trim(), ".");				String versaoCelular = Util.retirarCaracteresString(Fachada.getInstancia().getVersao().trim(), ".");			    int versaoArquivoNumerico = 0;			    int versaoCelularNumerico = 0;								if ( versaoArquivo != null && versaoArquivo.compareTo("") != 0 ) {				    versaoArquivoNumerico = Integer.parseInt(versaoArquivo);				    versaoCelularNumerico = Integer.parseInt(versaoCelular);				}							    // Condição criada para validar a versão da aplicação com			    // a versão vinda do arquivo			    if (versaoCelularNumerico >= versaoArquivoNumerico) {					if ( Util.validarDataAtual() ){					    TelaMenuPrincipal.getInstancia().criarTelaMenuPrincipal();					}							    } else {			    	Util.MensagemConfirmacao("A versão do sistema está desatualizada. Por favor instale a versão " + versaoArquivo + " ou versão mais recente.");			    	Fachada.getInstancia().exit();			    }			    } else {				Util.mostrarErro("DADOS INCORRETOS!", new Exception("DADOS INCORRETOS!"));				this.txLogin.setText("");				this.txSenha.setText("");		    }		}		if (evt.getCommand() == sair) {		    Fachada.getInstancia().exit();		}    }    public static TelaLogin getInstancia() {	if (instancia == null) {	    instancia = new TelaLogin();	}	return instancia;    }}
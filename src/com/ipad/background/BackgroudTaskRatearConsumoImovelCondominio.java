/* * Copyright (C) 2007-2009 the GSAN - Sistema Integrado de Gestão de Serviços de Saneamento * * This file is part of GSAN, an integrated service management system for Sanitation * * GSAN is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License. * * GSAN is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA *//* * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento * Copyright (C) <2007>  * Adriano Britto Siqueira * Alexandre Santos Cabral * Ana Carolina Alves Breda * Ana Maria Andrade Cavalcante * Aryed Lins de Araújo * Bruno Leonardo Rodrigues Barros * Carlos Elmano Rodrigues Ferreira * Clêudio de Andrade Lira * Denys Guimarães Guenes Tavares * Eduardo Breckenfeld da Rosa Borges * Fabíola Gomes de Araújo * Flêvio Leonardo Cavalcanti Cordeiro * Francisco do Nascimento Júnior * Homero Sampaio Cavalcanti * Ivan Sérgio da Silva Júnior * José Edmar de Siqueira * José Thiago Tenório Lopes * Kássia Regina Silvestre de Albuquerque * Leonardo Luiz Vieira da Silva * Márcio Roberto Batista da Silva * Maria de Fátima Sampaio Leite * Micaela Maria Coelho de Araújo * Nelson Mendonça de Carvalho * Newton Morais e Silva * Pedro Alexandre Santos da Silva Filho * Rafael Corrêa Lima e Silva * Rafael Francisco Pinto * Rafael Koury Monteiro * Rafael Palermo de Araújo * Raphael Veras Rossiter * Roberto Sobreira Barbalho * Roberto Souza * Rodrigo Avellar Silveira * Rosana Carvalho Barbosa * Sávio Luiz de Andrade Cavalcante * Tai Mu Shih * Thiago Augusto Souza do Nascimento * Tiago Moreno Rodrigues * Vivianne Barbosa Sousa * * Este programa é software livre; você pode redistribuí-lo e/ou * modificá-lo sob os termos de Licença Pública Geral GNU, conforme * publicada pela Free Software Foundation; versão 2 da * Licença. * Este programa é distribuído na expectativa de ser útil, mas SEM * QUALQUER GARANTIA; sem mesmo a garantia implêcita de * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais * detalhes. * Você deve ter recebido uma cópia da Licença Pública Geral GNU * junto com este programa; se não, escreva para Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA * 02111-1307, USA. */package com.ipad.background;import com.ipad.basic.ImovelConta;import com.ipad.business.ControladorConta;import com.ipad.business.ControladorImoveis;import com.ipad.io.Repositorio;import com.ipad.util.Constantes;import com.ipad.view.Abas;/** * Classe para controle do rateio e dos calculos dos imoveis tipo condominio *  * @date 21/12/2009 * @author bruno */public class BackgroudTaskRatearConsumoImovelCondominio extends BackgroundTask {    private int idPrimeiroImovel;    private int idUltimoImovel;    public Object[] anormalidades;    /**     * O construtor dessa classe recebe sempre o id do primeiro e do ultimo     * imovel a ser impresso     *      * @author Bruno Barros     * @date 21/12/2009     * @param idPrimeiroImovel Id do primeiro imovel     * @param idUltimoImovel Id do ultimo imovel     */    public BackgroudTaskRatearConsumoImovelCondominio(int idPrimeiroImovel, int idUltimoImovel) {	super();	this.idPrimeiroImovel = idPrimeiroImovel;	this.idUltimoImovel = idUltimoImovel;    }    /**     * Realizamos a impressao e o envio desses imoveis online     */    public void performTask() {	anormalidades =  ControladorConta.getInstancia().efetuarRateioConsumoDispositivoMovel(		    idPrimeiroImovel, 		    idUltimoImovel, 		    p);    }    /**     * Ao finalizar o rateio, passamos para o proximo imovel     */    public void taskFinished() {		if ( ( ( Boolean ) anormalidades[1] ).booleanValue() ){	    	    int idImovel = ( (Integer) anormalidades[2] ).intValue();	    	    ImovelConta imovel = new ImovelConta();	    Repositorio.carregarObjeto( imovel , idImovel );	    	    ControladorImoveis.getInstancia().setImovelSelecionado( imovel );	    	    	    if ( imovel.getIndcCondominio() == Constantes.SIM ){	    	ControladorImoveis.getInstancia().setIndiceImovelCondomio( 1 );	    } else {	    	ControladorImoveis.getInstancia().setIndiceImovelCondomio( imovel.getId() - ( imovel.getIdImovelCondominio() - 1 ) );	    }	} else if ( !( ( Boolean ) anormalidades[0] ).booleanValue() ) {	    ControladorImoveis.getInstancia().proximo();	}		Abas.getInstancia().criarAbas();    }    public void taskStarted() {	this.setPriority(Thread.NORM_PRIORITY);    }}
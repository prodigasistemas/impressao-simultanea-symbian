/* * Copyright (C) 2007-2009 the GSAN - Sistema Integrado de Gestão de Serviços de Saneamento * * This file is part of GSAN, an integrated service management system for Sanitation * * GSAN is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License. * * GSAN is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA *//* * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento * Copyright (C) <2007>  * Adriano Britto Siqueira * Alexandre Santos Cabral * Ana Carolina Alves Breda * Ana Maria Andrade Cavalcante * Aryed Lins de Araújo * Bruno Leonardo Rodrigues Barros * Carlos Elmano Rodrigues Ferreira * Clêudio de Andrade Lira * Denys Guimarães Guenes Tavares * Eduardo Breckenfeld da Rosa Borges * Fabíola Gomes de Araújo * Flêvio Leonardo Cavalcanti Cordeiro * Francisco do Nascimento Júnior * Homero Sampaio Cavalcanti * Ivan Sérgio da Silva Júnior * José Edmar de Siqueira * José Thiago Tenório Lopes * Kássia Regina Silvestre de Albuquerque * Leonardo Luiz Vieira da Silva * Márcio Roberto Batista da Silva * Maria de Fátima Sampaio Leite * Micaela Maria Coelho de Araújo * Nelson Mendonça de Carvalho * Newton Morais e Silva * Pedro Alexandre Santos da Silva Filho * Rafael Corrêa Lima e Silva * Rafael Francisco Pinto * Rafael Koury Monteiro * Rafael Palermo de Araújo * Raphael Veras Rossiter * Roberto Sobreira Barbalho * Roberto Souza * Rodrigo Avellar Silveira * Rosana Carvalho Barbosa * Sávio Luiz de Andrade Cavalcante * Tai Mu Shih * Thiago Augusto Souza do Nascimento * Tiago Moreno Rodrigues * Vivianne Barbosa Sousa * * Este programa é software livre; você pode redistribuí-lo e/ou * modificá-lo sob os termos de Licença Pública Geral GNU, conforme * publicada pela Free Software Foundation; versão 2 da * Licença. * Este programa é distribuído na expectativa de ser útil, mas SEM * QUALQUER GARANTIA; sem mesmo a garantia implêcita de * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais * detalhes. * Você deve ter recebido uma cópia da Licença Pública Geral GNU * junto com este programa; se não, escreva para Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA * 02111-1307, USA. */package com.ipad.business;import java.io.IOException;import java.io.InputStream;import java.util.Vector;import com.sun.lwuit.Container;import com.sun.lwuit.Label;import com.sun.lwuit.layouts.GridLayout;public class ListarImoveis {    public static ListarImoveis instancia;    /**     *      * Valor decimal do código ascii para o Carriage-Return (enter).     *      * OBS.: O valor hexadecimal é 0D     */    private final static byte ENTER = 13;    /**     *      * Valor decimal do código ascii para o Line-Feed (pula linha).     */    private final static byte LINE = 10;    /**     *      * Valor retornado quando o final do arquivo é atingido.     */    private final static byte EOF = -1;//    private static final String NOME_ARQUIVO_ANORMALIDADES = "/anormalidades.txt";    /**     *      * Transforma um Vector em um array de String.     *      *      *      * @param v     *      * @return     */    public static String[] trasnformarVectorEmArrayString(Vector v) {	String[] aux = new String[v.size() + 1];	aux[0] = "";	for (int i = 1; i < aux.length; i++) {	    aux[i] = (String) v.elementAt(i - 1);	}	return aux;    }    /**     *      *Carregar a Lista de Anormalidades.     **///    public Vector readListAnormalidades() {////	// if(ImovelReg11.getInstancia().getCodigoEmpresaFebraban() == )////	return this.lerValorChoiceGroups(getClass().getResourceAsStream(//		NOME_ARQUIVO_ANORMALIDADES));////    }    /**     *      * Ler o arquivo de Anormalidades     *      *      *      * @param file     *            Dados do arquivo texto.     *      * @return Vetor de linhas do arquivo texto.     */    public Vector lerValorChoiceGroups(InputStream file) {	Vector v = new Vector();	int count = 0;	try {	    int i = file.read();	    StringBuffer line = new StringBuffer();	    Vector grupo = new Vector();	    while (i != EOF) {		if ((i == ENTER) || (i == LINE) || (i == EOF)) {		    int qnt = Integer.parseInt(line.toString());		    for (int j = 0; j < qnt; j++) {			i = file.read();			if ((i == ENTER) || (i == LINE)) {			    i = file.read();			}			StringBuffer sb = new StringBuffer();			while ((i != ENTER) && (i != LINE) && (i != EOF)) {			    sb.append((char) i);			    i = file.read();			}			grupo.addElement(sb.toString());		    }		    count++;		    line.delete(0, line.length());		    v.addElement(grupo);		    grupo = new Vector();		    i = file.read();		    if ((i == ENTER) || (i == LINE)) {			i = file.read();		    }		} else {		    line.append((char) i);		    i = file.read();		}	    }	    grupo = null;	} catch (IOException ex) {	    ex.printStackTrace();	}	return v;    }    public static ListarImoveis getInstancia() {	if (ListarImoveis.instancia == null) {	    ListarImoveis.instancia = new ListarImoveis();	}	return ListarImoveis.instancia;    }    public Container criarTabelaCategoria() {	GridLayout exampleLayout = new GridLayout(2, 2);	Container container = new Container();	container.setLayout(exampleLayout);	container.addComponent(new Label("teste1"));	container.addComponent(new Label("teste2"));	container.addComponent(new Label("teste3"));	container.addComponent(new Label("teste4"));	// this.tbCategoria = new TableItem(new int[]{50,160,70});	// this.tbCategoria.addLine(new String[]{"Categoria","SubCategoria",	// "Quantidade"});	// this.tbCategoria.addCommand(ConstantesUtil.CMD_REMOVER);	// this.tbCategoria.setItemCommandListener(this.gerenciadorTelaImovel);	return container;    }}
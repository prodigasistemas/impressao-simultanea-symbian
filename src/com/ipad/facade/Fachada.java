/* * Copyright (C) 2007-2009 the GSAN - Sistema Integrado de Gestão de Serviços de Saneamento * * This file is part of GSAN, an integrated service management system for Sanitation * * GSAN is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License. * * GSAN is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA *//* * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento * Copyright (C) <2007>  * Adriano Britto Siqueira * Alexandre Santos Cabral * Ana Carolina Alves Breda * Ana Maria Andrade Cavalcante * Aryed Lins de Araújo * Bruno Leonardo Rodrigues Barros * Carlos Elmano Rodrigues Ferreira * Clêudio de Andrade Lira * Denys Guimarães Guenes Tavares * Eduardo Breckenfeld da Rosa Borges * Fabíola Gomes de Araújo * Flêvio Leonardo Cavalcanti Cordeiro * Francisco do Nascimento Júnior * Homero Sampaio Cavalcanti * Ivan Sérgio da Silva Júnior * José Edmar de Siqueira * José Thiago Tenório Lopes * Kássia Regina Silvestre de Albuquerque * Leonardo Luiz Vieira da Silva * Márcio Roberto Batista da Silva * Maria de Fátima Sampaio Leite * Micaela Maria Coelho de Araújo * Nelson Mendonça de Carvalho * Newton Morais e Silva * Pedro Alexandre Santos da Silva Filho * Rafael Corrêa Lima e Silva * Rafael Francisco Pinto * Rafael Koury Monteiro * Rafael Palermo de Araújo * Raphael Veras Rossiter * Roberto Sobreira Barbalho * Roberto Souza * Rodrigo Avellar Silveira * Rosana Carvalho Barbosa * Sávio Luiz de Andrade Cavalcante * Tai Mu Shih * Thiago Augusto Souza do Nascimento * Tiago Moreno Rodrigues * Vivianne Barbosa Sousa * * Este programa é software livre; você pode redistribuí-lo e/ou * modificá-lo sob os termos de Licença Pública Geral GNU, conforme * publicada pela Free Software Foundation; versão 2 da * Licença. * Este programa é distribuído na expectativa de ser útil, mas SEM * QUALQUER GARANTIA; sem mesmo a garantia implêcita de * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais * detalhes. * Você deve ter recebido uma cópia da Licença Pública Geral GNU * junto com este programa; se não, escreva para Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA * 02111-1307, USA. */package com.ipad.facade;import java.io.IOException;import javax.microedition.midlet.MIDlet;import javax.microedition.midlet.MIDletStateChangeException;import com.ipad.basic.Configuracao;import com.ipad.basic.Consumo;import com.ipad.business.BusinessLogin;import com.ipad.business.ControladorConta;import com.ipad.io.Repositorio;import com.ipad.util.Util;import com.sun.lwuit.Display;import com.sun.lwuit.plaf.UIManager;import com.sun.lwuit.util.Resources;public class Fachada extends MIDlet {    /**     * Versão da aplicação.     */    public static String versao;    /**     * Versão da aplicação.     */    public static final String IMPRESSAO_SIMULTANEA_ACTION_URL = "processarRequisicaoDipositivoMovelImpressaoSimultaneaAction.do";    /**     * Com base no padrão de Projeto chamado Singleton, Fachada tem apenas uma     * única instância em todo o contexto da aplicação.     */    private static Fachada instancia;    /**     * Fachada de rede.     */    private FachadaRede fachadaRede;    /**     * URL para conexão com o servidor     **/    private String url;    public Fachada() {    }    protected void destroyApp(boolean arg0) throws MIDletStateChangeException {    }    protected void pauseApp() {    }    protected void startApp() throws MIDletStateChangeException {	Resources r;	try {	    Display.init(this);	    r = Resources.open("/teste01.res");	    UIManager.getInstance().setThemeProps(r.getTheme(r.getThemeResourceNames()[0]));	} catch (IOException e) {	}	Fachada.instancia = this;	versao = this.getAppProperty("App-Version"); 	//PRODUÇAO	instancia.url = "http://200.178.173.131:8080/gsan/";		//TREINAMENTO//	instancia.url = "http://200.178.173.136:8080/gsan/";	//HOMOLOGAÇÃO//	instancia.url = "http://10.20.100.25:8080/gsan/";	//DESENVOLVIMENTO//	instancia.url = "http://10.20.100.103:8080/gsan/";	// MAQUINA LOCAL//	instancia.url = "http://10.20.0.114:8080/gsan/";    // MAQUINA PAMELA//	instancia.url = "http://10.20.1.182:8080/gsan/";    // MAQUINA ADRIANA//	instancia.url = "http://10.20.0.166:8080/gsan/";    // MAQUINA WELINGTON//	instancia.url = "http://10.20.0.226:8080/gsan/";	instancia.url = instancia.url + IMPRESSAO_SIMULTANEA_ACTION_URL;		this.fachadaRede = FachadaRede.getInstancia();	this.fachadaRede.setURL(instancia.url);	Boolean carregamento = Util.validarFalhaCarregamento();		if(carregamento != null){	    if(carregamento.equals(Boolean.FALSE)){		Repositorio.deleteRecordStore();		Configuracao.instancia = null;	    }	    	}	    	BusinessLogin.getInstancia().acoesLogin();    }    /**     * Sai da aplicação.     */    public void exit() {	try {	    destroyApp(true);	    notifyDestroyed();	} catch (MIDletStateChangeException e) {	    e.printStackTrace();	}	this.notifyDestroyed();    }    /**     * Retorna a instância da fachada.     *      * @return A instância da fachada.     */    public static Fachada getInstancia() {	return Fachada.instancia;    }    /**     * Retorna o URL do Gsan.     *      * @return URL do Gsan.     */    public String getUrl() {    	return Fachada.instancia.url;    }    /**     * Retorna a Versão da aplicação.     *      * @return a versão da aplicação.     */    public String getVersao() {    	return this.getAppProperty("App-Version");    }    /**     * Retorna o estado da impressora.     *      * @return o estado da impressora.     */    public String getPrinter() {    	return this.getAppProperty("Printer");    }     /**     * Retorna o estado do parametro que permite calcular todos os imovéis pelo valor de consumo médio do hidrometro.     *      * @return o estado do parametro Calculo-Consumo-Medio.     */    public String getCalcularPeloConsumoMedio() {    	return this.getAppProperty("Calculo-Consumo-Medio");    }    /**     * Calcular o valor da Conta e do Consumo     *      * @param imovel     * @return     */    public Consumo[] calcularContaConsumo() {	Consumo[] consumos = new Consumo[2];	ControladorConta.getInstancia().calcularConta();	consumos[0] = ControladorConta.getInstancia().getConsumoAgua();	consumos[1] = ControladorConta.getInstancia().getConsumoEsgoto();	ControladorConta.getInstancia().setConsumoAgua(null);	ControladorConta.getInstancia().setConsumoEsgoto(null);	return consumos;    }}